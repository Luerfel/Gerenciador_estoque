import oracledb # biblioteca da oracle
import os      # usado na limpeza da tela
import random
import fc





# Estabelece a conexão com o banco de dados Oracle.

# **Observações:**

# * Este código utiliza um banco de dados local para armazenar as informações.
# * Altere as variáveis `user`, `password`, `dsn` e `sid` para conectar-se ao seu banco de dados.

# **Detalhes da conexão:**

# * **user:** Nome de usuário do banco de dados.
# * **password:** Senha do banco de dados.
# * **host:** Nome do serviço do banco de dados.
# * **sid:** SID (System Identifier) do banco de dados.


<<<<<<< HEAD
connection = oracledb.connect (user="SYSTEM",password="senha",host="localhost",port=1521)
=======
connection = oracledb.connect (user="SYSTEM",password="testador",host="localhost",port=1521)
>>>>>>> ba1a89868983088ee1f0abe5dc1bd884927fa9d5
cursor = connection.cursor()

taxas = 1


# Programa principal
def main ():
    while True:
        repeticao = 1
        print("\n--- Menu de Cadastro de Produtos ---")
        print("1. Criar Tabela")
        print("2. Preencher Tabela")
        print("0. Sair do programa!")
        while repeticao == 1:
            try:
             opcao = int(input("Digite a opção desejada: "))
             fc.limpar_tela()
             repeticao = 0
            except:
                print("ERRO! TENTE NOVAMENTE!")
        if opcao == 1:
            criar_tabela()
        elif opcao == 2:
            preencher_tabela()
        elif opcao == 0:
            print("Saindo do programa...")
            return
        else:
            print("Opção inválida! Tente novamente.")

# FUNÇÕES

def criar_tabela():
    try:

        # Criação da tabela tbl_produtos
        cursor.execute("""
        CREATE TABLE tbl_produtos (
            nome NVARCHAR2(100),
            descricao NVARCHAR2(255),
            codigo_de_barras NVARCHAR2(13) PRIMARY KEY,
            preco_de_compra NUMBER(10,2),
            preco_de_venda NUMBER(10,2),
            unidades INT,
            fornecedor NVARCHAR2(100)
        )
        """)
        print("Tabela tbl_produtos criada com sucesso!!")

        # Criação da tabela TBL_VENDAS
        cursor.execute("""
        CREATE TABLE TBL_VENDAS (
            ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            DATA DATE NOT NULL,
            horario NVARCHAR2(10),
            VALOR_TOTAL NUMBER(10,2) NOT NULL,
            FORMA_PAGAMENTO NVARCHAR2(20) NOT NULL
        )
        """)
        print("Tabela TBL_VENDAS criada com sucesso!!")

        # Criação da tabela TBL_ITENS_VENDA
        cursor.execute("""
        CREATE TABLE TBL_ITENS_VENDA (
            ITEM_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            VENDA_ID NUMBER NOT NULL,
            CODIGO_PRODUTO NVARCHAR2(50) NOT NULL,
            NOME_PRODUTO NVARCHAR2(100) NOT NULL,
            QUANTIDADE NUMBER NOT NULL,
            TOTAL_ITEM NUMBER(10, 2) NOT NULL,
            FOREIGN KEY (VENDA_ID) REFERENCES TBL_VENDAS(ID)
        )
        """)
        print("Tabela TBL_ITENS_VENDA criada com sucesso!!")

        # Criação da tabela TBL_FORNECEDORES
        cursor.execute("""
        CREATE TABLE TBL_FORNECEDORES (
            ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            NOME VARCHAR2(50) NOT NULL,
            DESCRICAO VARCHAR2(255),
            SETOR VARCHAR2(50),
            ENDERECO VARCHAR2(255),
            TELEFONE VARCHAR2(20),
            EMAIL VARCHAR2(100),
            SITE VARCHAR2(100)
        )
        """)
        print("Tabela TBL_FORNECEDORES criada com sucesso!!")
        cursor.execute("""
            CREATE TABLE tbl_produto_composicao (
                codigo_de_barras NVARCHAR2(13) PRIMARY KEY,
                percentual_custo_fixo NUMBER(5, 2),
                percentual_custo_operacional NUMBER(5, 2),
                percentual_imposto NUMBER(5, 2),
                percentual_comissao_venda NUMBER(5, 2),
                percentual_margem_lucro NUMBER(5, 2),
                FOREIGN KEY (codigo_de_barras) REFERENCES tbl_produtos(codigo_de_barras)
            )
        """)
        connection.commit()

    except oracledb.DatabaseError as e:
        print(f"Erro ao acessar o banco de dados: {e}")
      
def imprimir_tabela():
    for row in cursor.execute('SELECT * FROM tbl_produtos'):
        print(f"""
Nome: {row[0]}
Descrição: {row[1]}
Código de Barras: {row[2]}
Preço de Compra: R${row[3]:.2f}
Preço de Venda: R${row[4]:.2f}
Unidades: {row[5]}
Fornecedor: {row[6]}
""")
    input("Aperte ENTER para continuar!\n")
    fc.limpar_tela()

def gerar_codigo_barra():
    """
    Gera um código de barra único com 13 dígitos.

    Retorna:
    str: Código de barra.
    """
    
    try:
        # Gera string com 13 números aleatórios
        codigo = "".join(str(random.randint(0, 9)) for _ in range(13))

        # Verifica se o código já existe
        sql = """
        SELECT COUNT(*) FROM tbl_produtos WHERE codigo_de_barra = :codigo_de_barra
        """
        cursor.execute(sql, {"CODIGO_DE_BARRAS": codigo})
        resultado = cursor.fetchone()[0]
        # se o resultado for maior que 1 então significa que existe
        if resultado > 0 :
            return gerar_codigo_barra()
    except:

        fc.limpar_tela()

    return codigo

def preencher_tabela():
    # Lista de roupas variadas
    roupas = [
        ("Camiseta", "Camiseta de algodão", "7890123456789", 20.00, 30.00, 50, "Fornecedor A"),
        ("Calça Jeans", "Calça jeans masculina", "1234567890123", 40.00, 60.00, 30, "Fornecedor B"),
        ("Vestido", "Vestido longo estampado", "2345678901234", 50.00, 80.00, 20, "Fornecedor C"),
        ("Blusa", "Blusa de frio", "3456789012345", 30.00, 45.00, 40, "Fornecedor D"),
        ("Shorts", "Shorts jeans", "4567890123456", 25.00, 35.00, 60, "Fornecedor E"),
        ("Saia", "Saia rodada estampada", "5678901234567", 35.00, 50.00, 25, "Fornecedor F"),
        ("Jaqueta", "Jaqueta corta-vento", "6789012345678", 60.00, 100.00, 15, "Fornecedor G"),
        ("Sapato", "Sapato social masculino", "7890123456780", 80.00, 120.00, 20, "Fornecedor H"),
        ("Bermuda", "Bermuda de praia", "8901234567890", 15.00, 25.00, 70, "Fornecedor I"),
        ("Vestido", "Vestido curto floral", "9012345678901", 45.00, 70.00, 30, "Fornecedor J")
    ]
            
    for roupa in roupas:
        cursor.execute("""
            INSERT INTO tbl_produtos (nome, descricao, codigo_de_barras, preco_de_compra, preco_de_venda, unidades, fornecedor)
            VALUES (:nome, :descricao, :codigo_de_barras, :preco_de_compra, :preco_de_venda, :unidades, :fornecedor)
        """, roupa)


   
    connection.commit()

if __name__ == "__main__":
    main()

connection.close() # finaliza a  conexão com o banco de dados
